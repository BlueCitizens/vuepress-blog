import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-B1G4RYfZ.js";const e={},o=t(`<h1 id="纯js实现视觉差效果" tabindex="-1"><a class="header-anchor" href="#纯js实现视觉差效果"><span>纯js实现视觉差效果</span></a></h1><p>给博客背景加了点视觉差效果，让观感更灵动一些。其实就是让背景和其他元素的滚动速度和幅度有一些区别。</p><ul><li><em>因为是在vue中做的，语法可能略有不同，思路是一致的</em> 首先找一张背景图，最好高一些。加一下background的样式，或者直接用dom嗯塞，我就是嗯塞，不是个好习惯：</li></ul><div class="language-key line-numbers-mode" data-ext="key" data-title="key"><pre class="language-key"><code>// 添加body图片
setBodyBackGround() {
    document.body.style.backgroundImage = this.bodyBgImage;
    document.body.style.backgroundRepeat = &#39;repeat&#39;;
    document.body.style.backgroundAttachment = &#39;fixed&#39;;
    document.body.style.backgroundSize = &#39;65%&#39;;
    document.body.style.backgroundPosition = &#39;center 0&#39;;
    document.body.style.backgroundColor = &#39;rgba(255, 255, 255,1)&#39;;//如果背景图有透明的部分，可以调整一下背景色
    document.body.style.position = &#39;relative&#39;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>size和水平position根据自己的需要调整。纵向位置最好为0，否则记得后面也需要做相应变动。 这里实现视觉差的方式同样是通过监听滚动事件，调整不同元素的滚动距离，实现“不同步滚动”的效果。这种方法兼容性比较好。新特性IntersectionObserver兼容性不太理想。有空可以尝试。 首先写个函数，用来给scroll事件绑定监听。</p><ul><li><em>this.scrollTop相当于是一个全局变量，js中直接在外面var一个就好了</em></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">getScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> newTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span> <span class="token comment">//解决兼容性</span>
    <span class="token keyword">let</span> height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>
    <span class="token keyword">let</span> cli_height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newTop <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> newTop <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> newTop<span class="token punctuation">;</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionY <span class="token operator">=</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop <span class="token operator">/</span> height <span class="token operator">*</span> cli_height <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监听一下事件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getScroll<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>到这里已经基本达到我们需要的效果了，其他都可以自己定制。 但是还有一些遗留问题，例如性能不佳，画面不流畅。后面逐一解决，先简单解释一下实现思路。 先获取几个值：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> newTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span> <span class="token comment">//兼容性</span>
<span class="token keyword">let</span> height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>
<span class="token keyword">let</span> cli_height <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通俗易懂的几个属性，注意这里都是针对根节点 &lt; html &gt; ，即document.documentElement.xx <strong>scrollTop</strong>：已滚动高度，从页面顶端到视野顶端的距离，初值0，也就是网页滚动到顶部时是0。<em>这里同时处理了IE/Edge浏览器的兼容性，目前只能通过body节点获取scrollTop。</em></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> newTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span> <span class="token comment">//兼容性</span>
<span class="token comment">//相当于</span>
<span class="token keyword">let</span> userAgent <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;IE&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;Edge&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> newTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> newTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>scrollHeight</strong>：当前页面完整的可滚动高度，可以理解为展示当前页面中所有元素所需的高度。在不改变任何比例和长度的情况下，无论滚动到哪里这个值是固定的。 <strong>clientHeight</strong>：浏览器可视区域的高度，当改变浏览器视窗高度时，这个值随之改变。 不理解的话，写个函数在控制台打印，观察数值的变化。 全局变量scrollTop保存了当前的已滚动高度，scroll事件触发时，高度更新，比较变量中前一时刻的scrollTop的值，就可以得出是否滚动以及滚动的方向。最后还需要将这个变量的值更新，为下一次scroll事件准备。 随便写个式子计算一下，让背景的移动变慢一些或者快一些，符合你的想法就行：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionY <span class="token operator">=</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop <span class="token operator">/</span> height <span class="token operator">*</span> cli_height <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在解决性能和视觉效果问题。实际应用时发现，滚动时页面卡顿比较严重，而且移动的视觉效果不是很理想。监听scroll事件是情非得已，我们仍然不希望它不断地被触发占用资源。因此通过类似节流的方法解决这个问题。 节流简单来说就是让一个函数在一段时间内只执行一次，或者说间隔特定时间执行一次。最简单的方法就是写一行setTimeout。这里不作赘述。 另外，并不需要在每次触发时都计算高度，移动背景，可以设置一个间隔的距离。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>newTop <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">||</span> newTop <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//每隔50px移动一次</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> newTop<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionY <span class="token operator">=</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop <span class="token operator">/</span> height <span class="token operator">*</span> cli_height <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样出来的效果是很僵硬的，背景在一段一段的瞬移，我们还是希望看到连贯的效果，所以加上transition</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token string">&#39;background-position 1.8s ease-out&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就能得到一个比较平滑而灵动，带有悬浮感的视觉差效果。</p>`,20),p=[o];function c(l,i){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","纯js实现视觉差效果.html.vue"]]),k=JSON.parse(`{"path":"/posts/%E7%BA%AFjs%E5%AE%9E%E7%8E%B0%E8%A7%86%E8%A7%89%E5%B7%AE%E6%95%88%E6%9E%9C.html","title":"纯js实现视觉差效果","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2020-04-15T00:00:00.000Z","category":["前端"],"tag":["JavaScript"],"star":false,"sticky":false,"description":"纯js实现视觉差效果 给博客背景加了点视觉差效果，让观感更灵动一些。其实就是让背景和其他元素的滚动速度和幅度有一些区别。 因为是在vue中做的，语法可能略有不同，思路是一致的 首先找一张背景图，最好高一些。加一下background的样式，或者直接用dom嗯塞，我就是嗯塞，不是个好习惯： size和水平position根据自己的需要调整。纵向位置最好为...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E7%BA%AFjs%E5%AE%9E%E7%8E%B0%E8%A7%86%E8%A7%89%E5%B7%AE%E6%95%88%E6%9E%9C.html"}],["meta",{"property":"og:site_name","content":"BCkun's BLOG"}],["meta",{"property":"og:title","content":"纯js实现视觉差效果"}],["meta",{"property":"og:description","content":"纯js实现视觉差效果 给博客背景加了点视觉差效果，让观感更灵动一些。其实就是让背景和其他元素的滚动速度和幅度有一些区别。 因为是在vue中做的，语法可能略有不同，思路是一致的 首先找一张背景图，最好高一些。加一下background的样式，或者直接用dom嗯塞，我就是嗯塞，不是个好习惯： size和水平position根据自己的需要调整。纵向位置最好为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-27T02:44:22.000Z"}],["meta",{"property":"article:author","content":"BlueCitizen"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2020-04-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-27T02:44:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"纯js实现视觉差效果\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-27T02:44:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BlueCitizen\\",\\"url\\":\\"https://bckun.top\\"}]}"]]},"headers":[],"git":{"createdTime":1709001862000,"updatedTime":1709001862000,"contributors":[{"name":"BlueCitizens","email":"bluecitizens@163.com","commits":1}]},"readingTime":{"minutes":3.63,"words":1089},"filePathRelative":"posts/纯js实现视觉差效果.md","localizedDate":"2020年4月15日","excerpt":"\\n<p>给博客背景加了点视觉差效果，让观感更灵动一些。其实就是让背景和其他元素的滚动速度和幅度有一些区别。</p>\\n<ul>\\n<li><em>因为是在vue中做的，语法可能略有不同，思路是一致的</em>\\n首先找一张背景图，最好高一些。加一下background的样式，或者直接用dom嗯塞，我就是嗯塞，不是个好习惯：</li>\\n</ul>\\n<div class=\\"language-key\\" data-ext=\\"key\\" data-title=\\"key\\"><pre class=\\"language-key\\"><code>// 添加body图片\\nsetBodyBackGround() {\\n    document.body.style.backgroundImage = this.bodyBgImage;\\n    document.body.style.backgroundRepeat = 'repeat';\\n    document.body.style.backgroundAttachment = 'fixed';\\n    document.body.style.backgroundSize = '65%';\\n    document.body.style.backgroundPosition = 'center 0';\\n    document.body.style.backgroundColor = 'rgba(255, 255, 255,1)';//如果背景图有透明的部分，可以调整一下背景色\\n    document.body.style.position = 'relative';\\n}\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
