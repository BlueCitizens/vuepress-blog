import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,f as a,a as t,e as c}from"./app-1Cz9djM3.js";const o={},p=t("p",null,"screen是一个模拟多屏的工具，可以在一个终端实现控制多个shell的功能。screen代表一个屏幕，同一个screen下可以再创建多个shell并自由切换。相比docker等容器繁琐的部署和管理，使用起来的比较直观敏捷。",-1),l=c(`<h1 id="ubuntu下使用screen" tabindex="-1"><a class="header-anchor" href="#ubuntu下使用screen"><span>Ubuntu下使用screen</span></a></h1><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#安装screen</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">screen</span>

<span class="token comment"># 创建会话并进入</span>
<span class="token function">screen</span> <span class="token parameter variable">-S</span> <span class="token punctuation">[</span>会话名<span class="token punctuation">]</span>

<span class="token comment"># 创建但不进入</span>
<span class="token function">screen</span> <span class="token parameter variable">-dmS</span> <span class="token punctuation">[</span>会话名<span class="token punctuation">]</span>

<span class="token comment"># 会话列表</span>
<span class="token function">screen</span> <span class="token parameter variable">-ls</span>

<span class="token comment"># 回到会话（detached）</span>
<span class="token function">screen</span> <span class="token parameter variable">-r</span> <span class="token punctuation">[</span>会话名<span class="token punctuation">]</span>

<span class="token comment"># 回到会话（attached）</span>
<span class="token function">screen</span> <span class="token parameter variable">-x</span> <span class="token punctuation">[</span>会话名<span class="token punctuation">]</span>

<span class="token comment"># 修改会话名</span>
<span class="token function">screen</span> <span class="token parameter variable">-S</span> <span class="token punctuation">[</span>旧名字<span class="token punctuation">]</span> <span class="token parameter variable">-X</span> sessionname <span class="token punctuation">[</span>新名字<span class="token punctuation">]</span>

<span class="token comment"># 删除会话</span>
<span class="token function">kill</span> <span class="token punctuation">[</span>会话ID<span class="token punctuation">]</span>
<span class="token comment"># 不是会话名，是自动生成的数字前缀</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在当前会话创建一个新shell窗口并切换到新窗口：</p><p><code>Ctrl + A组合键，松开后按C</code></p><p>在同一会话内的窗口之间切换：</p><p><code>Ctrl + A W在终端底部显示当前所有窗口；0~9切换到对应窗口；空格向后循环切换窗口；P向前切换，N向后切换</code></p><p>快捷键修改会话名：</p><p><code>Ctrl + A :（冒号）</code></p><p>删除当前窗口（shell）：</p><p><code>Ctrl + A K</code> 注意删除后窗口的标记不变</p><p>脱离（Detach）当前会话：</p><p><code>Ctrl + A D</code> 这样做会让会话变成<code>detached</code>状态。若使用<code>exit</code>离开则会话维持<code>attached</code>状态，两种情况需要使用不同的方法在终端恢复会话。</p><h2 id="quote" tabindex="-1"><a class="header-anchor" href="#quote"><span>Quote</span></a></h2><p>https://blog.csdn.net/euzmin/article/details/105090217</p><p>https://blog.csdn.net/han0373/article/details/81352663/</p><p>https://www.xcwmoon.com/post/143</p>`,16);function i(r,u){return n(),s("div",null,[p,a(" more "),l])}const v=e(o,[["render",i],["__file","Ubuntu下使用screen管理终端.html.vue"]]),h=JSON.parse(`{"path":"/posts/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8screen%E7%AE%A1%E7%90%86%E7%BB%88%E7%AB%AF.html","title":"Ubuntu下使用screen","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-06-14T00:00:00.000Z","category":["运维"],"tag":["Linux"],"description":"screen是一个模拟多屏的工具，可以在一个终端实现控制多个shell的功能。screen代表一个屏幕，同一个screen下可以再创建多个shell并自由切换。相比docker等容器繁琐的部署和管理，使用起来的比较直观敏捷。 Ubuntu下使用screen 在当前会话创建一个新shell窗口并切换到新窗口： Ctrl + A组合键，松开后按C 在同一会...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8screen%E7%AE%A1%E7%90%86%E7%BB%88%E7%AB%AF.html"}],["meta",{"property":"og:site_name","content":"BCkun's BLOG"}],["meta",{"property":"og:title","content":"Ubuntu下使用screen"}],["meta",{"property":"og:description","content":"screen是一个模拟多屏的工具，可以在一个终端实现控制多个shell的功能。screen代表一个屏幕，同一个screen下可以再创建多个shell并自由切换。相比docker等容器繁琐的部署和管理，使用起来的比较直观敏捷。 Ubuntu下使用screen 在当前会话创建一个新shell窗口并切换到新窗口： Ctrl + A组合键，松开后按C 在同一会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-27T02:44:22.000Z"}],["meta",{"property":"article:author","content":"BlueCitizen"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:published_time","content":"2022-06-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-27T02:44:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ubuntu下使用screen\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-27T02:44:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BlueCitizen\\",\\"url\\":\\"https://bckun.top\\"}]}"]]},"headers":[{"level":2,"title":"Quote","slug":"quote","link":"#quote","children":[]}],"git":{"createdTime":1709001862000,"updatedTime":1709001862000,"contributors":[{"name":"BlueCitizens","email":"bluecitizens@163.com","commits":1}]},"readingTime":{"minutes":1.26,"words":378},"filePathRelative":"posts/Ubuntu下使用screen管理终端.md","localizedDate":"2022年6月14日","excerpt":"<p>screen是一个模拟多屏的工具，可以在一个终端实现控制多个shell的功能。screen代表一个屏幕，同一个screen下可以再创建多个shell并自由切换。相比docker等容器繁琐的部署和管理，使用起来的比较直观敏捷。</p>\\n","autoDesc":true}`);export{v as comp,h as data};
