import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as p,b as n,e,a,d as c}from"./app-DZJBolJv.js";const l={},r=n("h1",{id:"spring容器之ioc控制反转",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring容器之ioc控制反转"},[n("span",null,"Spring容器之IoC控制反转")])],-1),u=n("h2",{id:"控制反转-ioc-inversion-of-control",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#控制反转-ioc-inversion-of-control"},[n("span",null,"控制反转 IoC Inversion of Control")])],-1),d=n("p",null,"IoC属于面向对象编程的设计原则，其目的是降低代码间的耦合度。",-1),v=n("p",null,[e("最常见的IoC方式是依赖注入DI（Dependency Injection）。"),n("em",null,"还有一种叫做依赖查找Dependency Lookup"),e("。以DI为例，IoC是如何体现解耦的呢？")],-1),m={href:"https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/1158025",target:"_blank",rel:"noopener noreferrer"},k=c(`<p>这句话简单来说，对象在创建时，它依赖的其他对象并不是由他自己内部的代码创建，而是某个外部的控制中心传递给他。举个例子，传统的面向对象编程中，倘若需要在一个类中使用另一个类的公开成员，需要在类中显式声明被调用类的对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//A调用B的方法test</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存在明显的类与类之间的耦合。在不引入依赖注入的情况下，很难消除这种耦合，在A使用B的过程中，代码执行不可避免地将推进到new操作。</p><p>而采用依赖注入技术之后，A的代码只需要在内部定义一个私有的B对象（仅仅是声明一个对象而不去初始化它并不形成耦合），通过容器控制程序将B对象在外部new出来并注入到A类里的引用中，而不需要进一步new来获得这个对象，从而剔除了代码的耦合部分。</p><pre><code>至于具体获取的方法、对象被获取时的状态由设置该容器的配置文件来声明，容器依据配置文件在需要的时候建立依赖关系，把被调用的接口实现并注入到目标类中。由IoC容器来管理对象的生命周期、依赖关系等，从而使得应用程序的配置和依赖性规范与实际的应用程序代码分离。其中一个特点就是通过文本的配置文件进行应用程序组件间相互关系的配置，而不用重新修改并编译具体的代码。Spring容器也引入了相关机制。
</code></pre><h2 id="spring的-autowired注解" tabindex="-1"><a class="header-anchor" href="#spring的-autowired注解"><span>Spring的@Autowired注解</span></a></h2><p>@Autowired注释可以对类的成员变量、方法及构造函数进行标注，指定Spring IoC为他们完成自动装配的工作。<em>通过@Autowired的使用来消除 set ，get方法</em>。</p><p>一个简单的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">B</span> b<span class="token punctuation">;</span>
    
    b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">BInterface</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">BInterface</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过注解告知IoC处理程序对象B需要自动装配，调用test()时，从IoC程序就去容器中去查询对应的Bean。</p><h2 id="autowired实现原理" tabindex="-1"><a class="header-anchor" href="#autowired实现原理"><span>@Autowired实现原理</span></a></h2><p>引入的包位置如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>org.springframework.beans.factory.annotation.Autowired
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在同一个目录annotation下有一个名为AutowiredAnnotationBeanPostProcessor的类（AutowiredAnnotation后置处理器）。在Spring IoC启动时，会自动装载该处理器并在容器扫描到@Autowired注解时，在容器中查找需要的Bean。</p><p>此时bean factory的getBean方法，一旦该方法调用，查找到该Bean则直接返回，若不存在就实例化该Bean并装配，也就是无论当前是否存在，总会返回一个bean实例。而了解另一个注解@Component就会知道，Spring开始执行Bean的实例化的时机就是组件扫描完成之后。在实例化和装配过程中，容器会多次递归调用getBean方法来保证充分解决类之间的依赖问题。这是一个复杂但万无一失的过程。</p><h2 id="autowired在几种不同情况下的作用" tabindex="-1"><a class="header-anchor" href="#autowired在几种不同情况下的作用"><span>@Autowired在几种不同情况下的作用</span></a></h2><p>https://blog.csdn.net/u013257679/article/details/52295106</p><h2 id="qualifier和-resource" tabindex="-1"><a class="header-anchor" href="#qualifier和-resource"><span>@Qualifier和@Resource</span></a></h2><p>有时候，我们为了向上提供不同的业务，需要多次实现服务接口service类。这就就会存在实现它的多个Impl类，要如何区分他们呢？</p><p>除了直接使用特定实现类本身来声明，也可以使用@Qualifier注解（适格者）或@Resource来实现相同的效果。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//在@Service注解里带上名字</span>
<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;specifiedServiceImpl&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpecifiedServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SpecifiedService</span><span class="token punctuation">{</span>
    <span class="token comment">/* ...... */</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">SpecifiedServiceImpl</span> specifiedServiceImpl<span class="token punctuation">;</span>

<span class="token comment">//或者</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;specifiedServiceImpl&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">SpecifiedService</span> specifiedService<span class="token punctuation">;</span>

<span class="token comment">//或者</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;specifiedServiceImpl&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">SpecifiedService</span> specifiedService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="quote" tabindex="-1"><a class="header-anchor" href="#quote"><span>Quote</span></a></h2><p>IoC:</p>`,23),b={href:"https://blog.csdn.net/ivan820819/article/details/79744797",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"@Autowired:",-1),g={href:"https://www.cnblogs.com/fnlingnzb-learner/p/9723834.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/u013257679/article/details/52295106",target:"_blank",rel:"noopener noreferrer"};function I(w,C){const s=i("ExternalLinkIcon");return o(),p("div",null,[r,u,d,v,n("p",null,[e("“通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。”"),n("a",m,[e("百度百科-控制反转"),a(s)])]),k,n("p",null,[n("a",b,[e("浅谈IOC--说清楚IOC是什么"),a(s)])]),h,n("p",null,[n("a",g,[e("@Autowired用法详解"),a(s)])]),n("p",null,[n("a",f,[e("@Autowired用法详解"),a(s)])])])}const S=t(l,[["render",I],["__file","Spring容器之IoC控制反转.html.vue"]]),y=JSON.parse(`{"path":"/posts/Spring%E5%AE%B9%E5%99%A8%E4%B9%8BIoC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC.html","title":"Spring容器之IoC控制反转","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2021-04-14T00:00:00.000Z","category":["开发"],"tag":["Java","Spring"],"description":"Spring容器之IoC控制反转 控制反转 IoC Inversion of Control IoC属于面向对象编程的设计原则，其目的是降低代码间的耦合度。 最常见的IoC方式是依赖注入DI（Dependency Injection）。还有一种叫做依赖查找Dependency Lookup。以DI为例，IoC是如何体现解耦的呢？ “通过控制反转，对象在...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Spring%E5%AE%B9%E5%99%A8%E4%B9%8BIoC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC.html"}],["meta",{"property":"og:site_name","content":"BCkun's BLOG"}],["meta",{"property":"og:title","content":"Spring容器之IoC控制反转"}],["meta",{"property":"og:description","content":"Spring容器之IoC控制反转 控制反转 IoC Inversion of Control IoC属于面向对象编程的设计原则，其目的是降低代码间的耦合度。 最常见的IoC方式是依赖注入DI（Dependency Injection）。还有一种叫做依赖查找Dependency Lookup。以DI为例，IoC是如何体现解耦的呢？ “通过控制反转，对象在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-27T02:44:22.000Z"}],["meta",{"property":"article:author","content":"BlueCitizen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2021-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-27T02:44:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring容器之IoC控制反转\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-27T02:44:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BlueCitizen\\",\\"url\\":\\"https://bckun.top\\"}]}"]]},"headers":[{"level":2,"title":"控制反转 IoC Inversion of Control","slug":"控制反转-ioc-inversion-of-control","link":"#控制反转-ioc-inversion-of-control","children":[]},{"level":2,"title":"Spring的@Autowired注解","slug":"spring的-autowired注解","link":"#spring的-autowired注解","children":[]},{"level":2,"title":"@Autowired实现原理","slug":"autowired实现原理","link":"#autowired实现原理","children":[]},{"level":2,"title":"@Autowired在几种不同情况下的作用","slug":"autowired在几种不同情况下的作用","link":"#autowired在几种不同情况下的作用","children":[]},{"level":2,"title":"@Qualifier和@Resource","slug":"qualifier和-resource","link":"#qualifier和-resource","children":[]},{"level":2,"title":"Quote","slug":"quote","link":"#quote","children":[]}],"git":{"createdTime":1709001862000,"updatedTime":1709001862000,"contributors":[{"name":"BlueCitizens","email":"bluecitizens@163.com","commits":1}]},"readingTime":{"minutes":3.88,"words":1163},"filePathRelative":"posts/Spring容器之IoC控制反转.md","localizedDate":"2021年4月14日","excerpt":"\\n<h2>控制反转 IoC Inversion of Control</h2>\\n<p>IoC属于面向对象编程的设计原则，其目的是降低代码间的耦合度。</p>\\n<p>最常见的IoC方式是依赖注入DI（Dependency Injection）。<em>还有一种叫做依赖查找Dependency Lookup</em>。以DI为例，IoC是如何体现解耦的呢？</p>\\n<p>“通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。”<a href=\\"https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/1158025\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">百度百科-控制反转</a></p>","autoDesc":true}`);export{S as comp,y as data};
