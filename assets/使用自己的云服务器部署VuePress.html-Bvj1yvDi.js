import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,f as r,a as e,b as n,d as s,e as i}from"./app-B1G4RYfZ.js";const d={},p=e("p",null,"VuePress的官方文档里没有提供任何关于自定义部署的说明，而是推荐了若干自动化平台，里面还没有一个开源的。可能是默认大家都是花钱解决问题吧。",-1),u=i('<h1 id="使用自己的云服务器部署vuepress" tabindex="-1"><a class="header-anchor" href="#使用自己的云服务器部署vuepress"><span>使用自己的云服务器部署VuePress</span></a></h1><h2 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析"><span>需求分析</span></a></h2><p>首先代理静态页面最合适的容器肯定还是nginx。问题是，如果这是一个纯静态页面尚可，但作为一个博客，必须要能轻松将新文章展示到页面上。如果不借助其他手段，只能每次更新都要重新构建和发布，那就太麻烦了，违背了我从原本自建的博客系统转移到静态博客的初衷。由此可见VP官方文档推荐用自动化平台部署确实是有原因的。再众多方案中，唯一可以免费使用的就是利用GitHub或者GitLab这样的代码托管平台自带的自动化功能。但速度和稳定性并不理想，尤其是GitHub天然就有访问门槛。</p><h2 id="方案选择" tabindex="-1"><a class="header-anchor" href="#方案选择"><span>方案选择</span></a></h2><p>既然都是用自动化平台部署，那就自己动手搭建一个自动化平台。整个流程是将项目托管到GitHub，然后当我们将更新push到远程仓库时，利用GitHub hooks触发自动化平台拉取新代码和构建，最后用nginx代理构建的页面就可以实现了。</p><h2 id="安装jenkins" tabindex="-1"><a class="header-anchor" href="#安装jenkins"><span>安装Jenkins</span></a></h2>',6),g={href:"https://www.jenkins.io/doc/book/installing/",target:"_blank",rel:"noopener noreferrer"},h=i(`<ul><li>确保你的环境中有Java，JDK或者JRE都行。需要注意的是Jenkins即将停止对Java11的支持，安装17是更长久的选择。<strong>此外，Java8的支持早已停止，只能使用较老的版本，许多插件和功能无法使用，不推荐</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> fontconfig openjdk-17-jre
<span class="token function">java</span> <span class="token parameter variable">-version</span>
openjdk version <span class="token string">&quot;17.0.8&quot;</span> <span class="token number">2023</span>-07-18
OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">17.0</span>.8+7-Debian-1deb12u1<span class="token punctuation">)</span>
OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">17.0</span>.8+7-Debian-1deb12u1, mixed mode, sharing<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认的apt仓库不包含Jenkins源，需要手动添加，以下是LTS版的添加方法，另外还有weekly版可供选择</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> /usr/share/keyrings/jenkins-keyring.asc <span class="token punctuation">\\</span>
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
<span class="token builtin class-name">echo</span> deb <span class="token punctuation">[</span>signed-by<span class="token operator">=</span>/usr/share/keyrings/jenkins-keyring.asc<span class="token punctuation">]</span> <span class="token punctuation">\\</span>
  https://pkg.jenkins.io/debian-stable binary/ <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token punctuation">\\</span>
  /etc/apt/sources.list.d/jenkins.list <span class="token operator">&gt;</span> /dev/null
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么不使用docker部署" tabindex="-1"><a class="header-anchor" href="#为什么不使用docker部署"><span>为什么不使用Docker部署？</span></a></h3>`,5),b={href:"https://hub.docker.com/r/jenkinsci/blueocean",target:"_blank",rel:"noopener noreferrer"},k={href:"https://hub.docker.com/r/jenkins/jenkins",target:"_blank",rel:"noopener noreferrer"},f=i('<p>此外，即便使用Docker部署，我仍然推荐将挂载的卷映射到真实路径而非使用容器路径，这会使后续操作变得简单。</p><h2 id="部署jenkins" tabindex="-1"><a class="header-anchor" href="#部署jenkins"><span>部署Jenkins</span></a></h2><p>理论上安装成功后Jenkins服务就已经启动了，访问服务器的8080端口，注意配置防火墙。此时需要用初始密码解锁Jenkins，密码在日志或者页面提示的路径下都可以找到。然后就是进行一些简单的初始化配置，包括创建管理员账户和自动安装一些插件。通常情况下全部完成后就可以使用了。</p><p>因为构建Vue应用需要NodeJS环境，所以我们需要先在Jenkins安装插件。进入<code>系统管理 &gt; 插件管理 &gt; 可用插件</code>，搜索NodeJS，选中并安装NodeJS Plugin，重启Jenkins，回到已安装的插件列表我们就能看到插件已经成功启用了</p><figure><img src="https://img.bckun.top/file/8136ef7f8598ed2ee0bea.png" alt="NodeJS Plugin" tabindex="0" loading="lazy"><figcaption>NodeJS Plugin</figcaption></figure><h3 id="配置nodejs环境" tabindex="-1"><a class="header-anchor" href="#配置nodejs环境"><span>配置NodeJS环境</span></a></h3>',6),m=e("code",null,"系统管理 > 全局工具配置",-1),v={href:"https://juejin.cn/post/7255588784590438456",target:"_blank",rel:"noopener noreferrer"},_=e("figure",null,[e("img",{src:"https://img.bckun.top/file/d783842c1ee0698dda45a.png",alt:"config",tabindex:"0",loading:"lazy"}),e("figcaption",null,"config")],-1),x=e("h3",{id:"配置github仓库",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#配置github仓库"},[e("span",null,"配置GitHub仓库")])],-1),y={href:"https://segmentfault.com/a/1190000023072976",target:"_blank",rel:"noopener noreferrer"},j=e("code",null,"Settings / Developer Settings / Personal access tokens / Tokens (classic)",-1),J=e("code",null,"Generate new token > Generate new token (classic)",-1),E={href:"https://github.com/settings/tokens/new",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"repo",-1),B=e("code",null,"admin:public_key",-1),G=e("code",null,"admin:repo_hook",-1),w=i('<figure><img src="https://img.bckun.top/file/4a00ca770cedcd4e0366e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来在你的GitHub账户下新建一个仓库，进入仓库的<code>Settings &gt; Webhook</code>，点击<code>Add webhook</code>，<code>Payload URL</code>填<code>Jenkins的地址/github-webhook/</code>，例如<code>http://xx.xxx.xxx.xxx:8080/github-webhook/</code>，触发规则选中<code>Just the push event</code>，勾选Active。添加成功后，仓库的变动将会推送到Jenkins的构建触发器。</p><figure><img src="https://img.bckun.top/file/5de15cfae11610839ce23.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="配置jenkins的github插件" tabindex="-1"><a class="header-anchor" href="#配置jenkins的github插件"><span>配置Jenkins的GitHub插件</span></a></h3><p>仿照NodeJS插件的安装方法安装GitHub插件（通常已经预装了该插件）。进入到Jenkins的<code>系统管理 &gt; 系统配置</code>，滚动到GitHub，添加GitHub服务器如图，<code>API URL</code>填<code>https://api.github.com</code>，注意需要添加凭据Credentials，Secret填刚刚在GitHub获取到的token，ID和描述可以随意填写，填完可以点击连接测试测试一下是否连通。</p><figure><img src="https://img.bckun.top/file/cd9a8882a53cfdbba90af.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://img.bckun.top/file/f693e7ed319d6042e55da.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="创建任务" tabindex="-1"><a class="header-anchor" href="#创建任务"><span>创建任务</span></a></h2><p>全局配置完成，接下来就是添加构建任务。点击<code>新建任务 &gt; 构建一个自由风格的软件项目</code>，然后完成一下项目配置</p>',9),V=i('<li><p><code>General &gt; GitHub项目 &gt; 项目URL</code>填写仓库地址，如<code>https://github.com/BlueCitizens/vuepress-blog/</code></p><figure><img src="https://img.bckun.top/file/de3743dc9a1365f9e4902.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>源码管理 &gt; Git</p><p>注意这里也需要添加凭据Credentials，使用账户密码，用来从仓库拉取代码。源码库使用<code>githubweb</code>。</p><figure><img src="https://img.bckun.top/file/ecf47258eaebbc9216bd9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://img.bckun.top/file/7db31b28caf5cdff22910.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>构建触发器</p><p>勾选<code>GitHub hook trigger for GITScm polling</code>，其他不需要勾选。</p></li><li><p>构建环境</p><p>勾选<code>Use secret text(s) or file(s)</code>和<code>Provide Node &amp; npm bin/ folder to PATH</code></p><figure><img src="https://img.bckun.top/file/35ef9894c42e8c6240ccf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li>',4),A=i('<p>Build Steps</p><figure><img src="https://img.bckun.top/file/4484a8562baeb11ee7951.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要注意的是，你的构建指令可能与我不同。<code>rsync -a</code>命令用来将构建同步到你准备用nginx代理的路径，这样每次构建后nginx都能代理最新的构建。</p><p>另外，Jenkins默认使用的用户组是<code>Jenkins:Jenkins</code>，这个用户只拥有在Jenkins工作目录下的权限，因此同步的命令需要使用<code>sudo</code>。通常解决这个问题有两个方向，一个是修改Jenkins使用的用户组，另一个是允许Jenkins绕过密码使用<code>sudo</code>，可以参考这两篇文章</p>',4),N={href:"https://segmentfault.com/q/1010000009005438",target:"_blank",rel:"noopener noreferrer"},D={href:"https://juejin.cn/post/7102360505313918983#heading-8",target:"_blank",rel:"noopener noreferrer"},z=e("li",null,[e("p",null,"构建后操作"),e("figure",null,[e("img",{src:"https://img.bckun.top/file/89fd73abb6daa3e2cd690.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")])],-1),S=i(`<p>保存以上配置，将你的本地代码push到远程仓库，然后你就可以尝试立即进行一次构建了。</p><h2 id="使用nginx代理" tabindex="-1"><a class="header-anchor" href="#使用nginx代理"><span>使用nginx代理</span></a></h2><p>安装nginx</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>访问服务器的80端口，应该能看到<code>Welcome to nginx</code>，注意打开防火墙。</p><p>修改代理配置，并重载nginx。具体的代理配置方法可以参考我的博客</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root /var/www/vp-blog/dist;
	
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> nginx <span class="token parameter variable">-t</span>
<span class="token function">sudo</span> nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，你的博客就部署成功了。</p><h2 id="quote" tabindex="-1"><a class="header-anchor" href="#quote"><span>Quote</span></a></h2>`,10),H={href:"https://www.jenkins.io/doc/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://juejin.cn/post/7255588784590438456",target:"_blank",rel:"noopener noreferrer"},T={href:"https://segmentfault.com/a/1190000023072976",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.cn/post/7102360505313918983#heading-8",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.ruanyifeng.com/blog/2020/08/rsync.html",target:"_blank",rel:"noopener noreferrer"};function I(O,R){const t=o("ExternalLinkIcon");return l(),c("div",null,[p,r(" more "),u,e("p",null,[n("Jenkins应该是最有名的开源CI平台了，它使用Java编写，历史悠久，许多中小企业都使用它来搭建DevOps工作流。我们按照"),e("a",g,[n("官网的教学"),s(t)]),n("安装Jenkins，以Debian/Ubuntu为例：")]),h,e("p",null,[n("原因是我被中文官网坑了。简中的文档似乎已经很久没有维护了，推荐的Docker仓库是"),e("a",b,[n("jenkinsci/blueocean"),s(t)]),n("，这个仓库最后一次更新是一年之前了。你应该使用的是英文官网提供的仓库"),e("a",k,[n("jenkins/jenkins"),s(t)]),n("，这里才是最新版本。")]),f,e("p",null,[n("接下来就可以配置Node环境了，进入到"),m,n("，向下滚动到NodeJS安装，然后选择你需要的NodeJS版本（可以选和你本地的构建相同的），记得保存配置。详细步骤参考"),e("a",v,[n("jenkins 中配置Node环境"),s(t)])]),_,x,e("p",null,[n("可以完整参考这篇"),e("a",y,[n("使用jenkins自动构建github项目"),s(t)])]),e("p",null,[n("首先点击头像，依此进入到"),j,n("，下拉"),J,n("或者"),e("a",E,[n("直接戳链接直达"),s(t)]),n("，Note随便填，Expiration可以选择过期时间，也可以选永不过期，然后勾选"),P,n(),B,n(),G,n("，点最后的Generate token生成。此时会给你一个仅显示一次的key，这是使用这条token的唯一凭证，将它保存好。")]),w,e("ul",null,[V,e("li",null,[A,e("p",null,[e("a",N,[n("如何修改sudoers？"),s(t)])]),e("p",null,[e("a",D,[n("前端工程化：保姆级教学 Jenkins 部署前端项目"),s(t)])])]),z]),S,e("p",null,[e("a",H,[n("Jenkins User Documentation"),s(t)])]),e("p",null,[e("a",C,[n("jenkins 中配置Node环境"),s(t)])]),e("p",null,[e("a",T,[n("使用jenkins自动构建github项目"),s(t)])]),e("p",null,[e("a",q,[n("前端工程化：保姆级教学 Jenkins 部署前端项目"),s(t)])]),e("p",null,[e("a",L,[n("rsync 用法教程"),s(t)])])])}const F=a(d,[["render",I],["__file","使用自己的云服务器部署VuePress.html.vue"]]),K=JSON.parse(`{"path":"/posts/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2VuePress.html","title":"使用自己的云服务器部署VuePress","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-02-27T00:00:00.000Z","category":["运维"],"tag":["Jenkins","GitHub"],"description":"VuePress的官方文档里没有提供任何关于自定义部署的说明，而是推荐了若干自动化平台，里面还没有一个开源的。可能是默认大家都是花钱解决问题吧。 使用自己的云服务器部署VuePress 需求分析 首先代理静态页面最合适的容器肯定还是nginx。问题是，如果这是一个纯静态页面尚可，但作为一个博客，必须要能轻松将新文章展示到页面上。如果不借助其他手段，只能...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2VuePress.html"}],["meta",{"property":"og:site_name","content":"BCkun's BLOG"}],["meta",{"property":"og:title","content":"使用自己的云服务器部署VuePress"}],["meta",{"property":"og:description","content":"VuePress的官方文档里没有提供任何关于自定义部署的说明，而是推荐了若干自动化平台，里面还没有一个开源的。可能是默认大家都是花钱解决问题吧。 使用自己的云服务器部署VuePress 需求分析 首先代理静态页面最合适的容器肯定还是nginx。问题是，如果这是一个纯静态页面尚可，但作为一个博客，必须要能轻松将新文章展示到页面上。如果不借助其他手段，只能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.bckun.top/file/8136ef7f8598ed2ee0bea.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T11:11:42.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"使用自己的云服务器部署VuePress"}],["meta",{"property":"article:author","content":"BlueCitizen"}],["meta",{"property":"article:tag","content":"Jenkins"}],["meta",{"property":"article:tag","content":"GitHub"}],["meta",{"property":"article:published_time","content":"2024-02-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-28T11:11:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用自己的云服务器部署VuePress\\",\\"image\\":[\\"https://img.bckun.top/file/8136ef7f8598ed2ee0bea.png\\",\\"https://img.bckun.top/file/d783842c1ee0698dda45a.png\\",\\"https://img.bckun.top/file/4a00ca770cedcd4e0366e.png\\",\\"https://img.bckun.top/file/5de15cfae11610839ce23.png\\",\\"https://img.bckun.top/file/cd9a8882a53cfdbba90af.png\\",\\"https://img.bckun.top/file/f693e7ed319d6042e55da.png\\",\\"https://img.bckun.top/file/de3743dc9a1365f9e4902.png\\",\\"https://img.bckun.top/file/ecf47258eaebbc9216bd9.png\\",\\"https://img.bckun.top/file/7db31b28caf5cdff22910.png\\",\\"https://img.bckun.top/file/35ef9894c42e8c6240ccf.png\\",\\"https://img.bckun.top/file/4484a8562baeb11ee7951.png\\",\\"https://img.bckun.top/file/89fd73abb6daa3e2cd690.png\\"],\\"datePublished\\":\\"2024-02-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-28T11:11:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BlueCitizen\\",\\"url\\":\\"https://bckun.top\\"}]}"]]},"headers":[{"level":2,"title":"需求分析","slug":"需求分析","link":"#需求分析","children":[]},{"level":2,"title":"方案选择","slug":"方案选择","link":"#方案选择","children":[]},{"level":2,"title":"安装Jenkins","slug":"安装jenkins","link":"#安装jenkins","children":[{"level":3,"title":"为什么不使用Docker部署？","slug":"为什么不使用docker部署","link":"#为什么不使用docker部署","children":[]}]},{"level":2,"title":"部署Jenkins","slug":"部署jenkins","link":"#部署jenkins","children":[{"level":3,"title":"配置NodeJS环境","slug":"配置nodejs环境","link":"#配置nodejs环境","children":[]},{"level":3,"title":"配置GitHub仓库","slug":"配置github仓库","link":"#配置github仓库","children":[]},{"level":3,"title":"配置Jenkins的GitHub插件","slug":"配置jenkins的github插件","link":"#配置jenkins的github插件","children":[]}]},{"level":2,"title":"创建任务","slug":"创建任务","link":"#创建任务","children":[]},{"level":2,"title":"使用nginx代理","slug":"使用nginx代理","link":"#使用nginx代理","children":[]},{"level":2,"title":"Quote","slug":"quote","link":"#quote","children":[]}],"git":{"createdTime":1709118702000,"updatedTime":1709118702000,"contributors":[{"name":"BlueCitizens","email":"bluecitizens@163.com","commits":1}]},"readingTime":{"minutes":6.47,"words":1941},"filePathRelative":"posts/使用自己的云服务器部署VuePress.md","localizedDate":"2024年2月27日","excerpt":"<p>VuePress的官方文档里没有提供任何关于自定义部署的说明，而是推荐了若干自动化平台，里面还没有一个开源的。可能是默认大家都是花钱解决问题吧。</p>\\n","autoDesc":true}`);export{F as comp,K as data};
