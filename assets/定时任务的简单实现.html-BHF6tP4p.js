import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as t,c,f as l,a as n,b as i,d as o,e as p}from"./app-BfklB_sA.js";const d={},r=n("p",null,"说到定时任务，比较容易想到的是quartz定时框架。而一些简单轻量的任务使用框架未免杀鸡用牛刀了。我们也可以通过ScheduledExecutorService接口实现。",-1),u=n("h1",{id:"定时任务的简单实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#定时任务的简单实现"},[n("span",null,"定时任务的简单实现")])],-1),k=n("h2",{id:"scheduledexecutorservice",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#scheduledexecutorservice"},[n("span",null,"ScheduledExecutorService")])],-1),m={href:"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html",target:"_blank",rel:"noopener noreferrer"},v=p(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public interface ScheduledExecutorService extends ExecutorService
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>继承自接口ExecutorService，官方给出的说明：这是一个可以设定延时执行命令或定期循环执行的ExecutorService。</p><h2 id="timer" tabindex="-1"><a class="header-anchor" href="#timer"><span>Timer</span></a></h2><p>ScheduledExecutorService和Timer的区别在于，Timer的内部只有一个线程，如果有多个任务就变成顺序执行，我们设定的延迟时间和循环时间就不正确了。</p><p>ScheduledExecutorService是基于线程池设计的定时任务类，每个（循环）调度任务都会分配到线程池中的一个线程去执行，任务是并发执行，互不影响。</p><p>在对延迟任务和循环任务要求严格的时候，就需要考虑使用ScheduledExecutorService了。</p><p>需要注意，只有当调度任务来的时候，ScheduledExecutorService才会真正启动一个线程，其余时间ScheduledExecutorService都是出于轮询任务的状态。</p><h2 id="schedule" tabindex="-1"><a class="header-anchor" href="#schedule"><span>schedule()</span></a></h2><p>schedule方法源码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * Creates and executes a one-shot action that becomes enabled
     * after the given delay.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">command</span> the task to execute
     * <span class="token keyword">@param</span> <span class="token parameter">delay</span> the time from now to delay execution
     * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the delay parameter
     * <span class="token keyword">@return</span> a ScheduledFuture representing pending completion of
     *         the task and whose <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> method will return
     *         <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> upon completion
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be
     *         scheduled for execution
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if command is null
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span><span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设定延时后单次执行动作，定义了三个参数：</p><ul><li>Runnable类型的指令（任务）</li><li>long型的延时</li><li>TimeUnit值</li></ul><p>用起来像这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 操作延迟10毫秒
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">OPERATE_DELAY_TIME</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 执行任务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">task</span> 任务
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">TimerTask</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scheduledExecutorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token constant">OPERATE_DELAY_TIME</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看源码，TimerTask类是Runnable接口的实现，“一种可以计划执行一次或循环的定时器”。因此参数也是符合定义的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//TimerTask类源码</span>

<span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * A task that can be scheduled for one-time or repeated execution by a Timer.
 *
 * <span class="token keyword">@author</span>  Josh Bloch
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token class-name">Timer</span></span>
 * <span class="token keyword">@since</span>   1.3
 */</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TimerTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//Runnable接口源码</span>

<span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * When an object implementing interface <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">Runnable</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> is used
     * to create a thread, starting the thread causes the object&#39;s
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">run</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> method to be called in that separately executing
     * thread.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * The general contract of the method <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">run</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> is that it may
     * take any action whatsoever.
     *
     * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Thread</span><span class="token punctuation">#</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scheduleatfixedrate" tabindex="-1"><a class="header-anchor" href="#scheduleatfixedrate"><span>scheduleAtFixedRate()</span></a></h2><p>源码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Creates and executes a periodic action that becomes enabled first
     * after the given initial delay, and subsequently with the given
     * period; that is executions will commence after
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">initialDelay</span></span><span class="token punctuation">}</span> then <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">initialDelay<span class="token operator">+</span>period</span></span><span class="token punctuation">}</span>, then
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">initialDelay <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> period</span></span><span class="token punctuation">}</span>, and so on.
     * If any execution of the task
     * encounters an exception, subsequent executions are suppressed.
     * Otherwise, the task will only terminate via cancellation or
     * termination of the executor.  If any execution of this task
     * takes longer than its period, then subsequent executions
     * may start late, but will not concurrently execute.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">command</span> the task to execute
     * <span class="token keyword">@param</span> <span class="token parameter">initialDelay</span> the time to delay first execution
     * <span class="token keyword">@param</span> <span class="token parameter">period</span> the period between successive executions
     * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the initialDelay and period parameters
     * <span class="token keyword">@return</span> a ScheduledFuture representing pending completion of
     *         the task, and whose <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> method will throw an
     *         exception upon cancellation
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be
     *         scheduled for execution
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if command is null
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if period less than or equal to zero
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span> <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建并执行一个首先被启用的周期性动作，按照上一次任务的发起时间计算下一次任务的开始时间。若执行发生异常，则立即停止并抑制后续执行。若任务用时超过间隔，则下一个任务等待正在执行的任务结束才能执行，因此不允许并发执行。定义了四个参数：</p><ul><li>Runnable 待执行的指令（任务）</li><li>long 的初始化延时（第一次执行前的延时）</li><li>long 循环任务连续执行的间隔（按照上一次任务的发起时间计算下一次任务的开始时间）</li><li>TimeUnit值</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * Creates and executes a periodic action that becomes enabled first
     * after the given initial delay, and subsequently with the
     * given delay between the termination of one execution and the
     * commencement of the next.  If any execution of the task
     * encounters an exception, subsequent executions are suppressed.
     * Otherwise, the task will only terminate via cancellation or
     * termination of the executor.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">command</span> the task to execute
     * <span class="token keyword">@param</span> <span class="token parameter">initialDelay</span> the time to delay first execution
     * <span class="token keyword">@param</span> <span class="token parameter">delay</span> the delay between the termination of one
     * execution and the commencement of the next
     * <span class="token keyword">@param</span> <span class="token parameter">unit</span> the time unit of the initialDelay and delay parameters
     * <span class="token keyword">@return</span> a ScheduledFuture representing pending completion of
     *         the task, and whose <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">}</span> method will throw an
     *         exception upon cancellation
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if the task cannot be
     *         scheduled for execution
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if command is null
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if delay less than or equal to zero
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span> <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span> <span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和scheduleAtFixedRate()的区别是周期计算的基准变为从前一次执行结束到下一次执行开始的间隔。参数相同。</p><h2 id="threadfactory" tabindex="-1"><a class="header-anchor" href="#threadfactory"><span>ThreadFactory</span></a></h2><p>https://www.cnblogs.com/chenmo-xpw/p/5555931.html https://blog.csdn.net/u011315960/article/details/71422386</p>`,26);function h(b,g){const a=s("ExternalLinkIcon");return t(),c("div",null,[r,l(" more "),u,k,n("p",null,[n("a",m,[i("Oracle文档"),o(a)])]),v])}const w=e(d,[["render",h],["__file","定时任务的简单实现.html.vue"]]),f=JSON.parse(`{"path":"/posts/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html","title":"定时任务的简单实现","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2020-11-18T00:00:00.000Z","category":["后端"],"tag":["Java"],"description":"说到定时任务，比较容易想到的是quartz定时框架。而一些简单轻量的任务使用框架未免杀鸡用牛刀了。我们也可以通过ScheduledExecutorService接口实现。 定时任务的简单实现 ScheduledExecutorService Oracle文档 继承自接口ExecutorService，官方给出的说明：这是一个可以设定延时执行命令或定期循...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"BCkun's BLOG"}],["meta",{"property":"og:title","content":"定时任务的简单实现"}],["meta",{"property":"og:description","content":"说到定时任务，比较容易想到的是quartz定时框架。而一些简单轻量的任务使用框架未免杀鸡用牛刀了。我们也可以通过ScheduledExecutorService接口实现。 定时任务的简单实现 ScheduledExecutorService Oracle文档 继承自接口ExecutorService，官方给出的说明：这是一个可以设定延时执行命令或定期循..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-27T02:44:22.000Z"}],["meta",{"property":"article:author","content":"BlueCitizen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2020-11-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-27T02:44:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"定时任务的简单实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-27T02:44:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BlueCitizen\\",\\"url\\":\\"https://bckun.top\\"}]}"]]},"headers":[{"level":2,"title":"ScheduledExecutorService","slug":"scheduledexecutorservice","link":"#scheduledexecutorservice","children":[]},{"level":2,"title":"Timer","slug":"timer","link":"#timer","children":[]},{"level":2,"title":"schedule()","slug":"schedule","link":"#schedule","children":[]},{"level":2,"title":"scheduleAtFixedRate()","slug":"scheduleatfixedrate","link":"#scheduleatfixedrate","children":[]},{"level":2,"title":"ThreadFactory","slug":"threadfactory","link":"#threadfactory","children":[]}],"git":{"createdTime":1709001862000,"updatedTime":1709001862000,"contributors":[{"name":"BlueCitizens","email":"bluecitizens@163.com","commits":1}]},"readingTime":{"minutes":3.9,"words":1169},"filePathRelative":"posts/定时任务的简单实现.md","localizedDate":"2020年11月18日","excerpt":"<p>说到定时任务，比较容易想到的是quartz定时框架。而一些简单轻量的任务使用框架未免杀鸡用牛刀了。我们也可以通过ScheduledExecutorService接口实现。</p>\\n","autoDesc":true}`);export{w as comp,f as data};
